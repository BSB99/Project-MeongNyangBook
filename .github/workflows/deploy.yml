name: Deploy to Amazon EC2

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

# 본인이 설정한 값을 여기서 채워넣습니다.
# 리전, 버킷 이름, CodeDeploy 앱 이름, CodeDeploy 배포 그룹 이름
env:
  AWS_REGION: ap-northeast-2
  S3_BUCKET_NAME: my-github-actions-s3-buckets
  CODE_DEPLOY_APPLICATION_NAME: my-codedeploy-app
  CODE_DEPLOY_DEPLOYMENT_GROUP_NAME: my-codedeploy-deployment-group

permissions:
  contents: read

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
      # (1) 기본 체크아웃
      - name: Checkout
        uses: actions/checkout@v3

      # (1.5) 기존 application.properties 파일 삭제
      - name: Remove existing application.properties if it exists
        run: |
          FILE_PATH="/home/ubuntu/app/src/main/resources/application.properties"
          if [ -f "$FILE_PATH" ]; then
            rm $FILE_PATH
          fi

      # (1.6) 새 application.properties 파일 생성
      - run: touch ./src/main/resources/application.properties

      # (1.7) 파일에 secrets 정보 쓰기
      - run: echo "${{ secrets.APPLICATION_INFO }}" > ./src/main/resources/application.properties
      - run: cat ./src/main/resources/application.properties

      # (2) JDK 11 세팅
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

    # (2.5) gradlew 실행 권한 부여
      - name: Set execute permission for gradlew
        run: chmod +x ./gradlew

      # (2.6) Docker Compose 실행과 빌드
      - name: Build and run Docker Compose
        run: |
          cd ~/app/src/main/resources  # resources 폴더 위치로 이동
          sudo docker-compose up --build -d  # Docker Compose로 애플리케이션 실행 및 빌드      

      # (3) Gradle build (Test 제외)
      - name: Build with Gradle
        uses: gradle/gradle-build-action@0d13054264b0bb894ded474f08ebb30921341cee
        with:
          arguments: clean build -x test

      # (4) AWS 인증 (IAM 사용자 Access Key, Secret Key 활용)
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      # (5) 빌드 결과물을 S3 버킷에 업로드
      - name: Upload to AWS S3
        run: |
          aws deploy push \
            --application-name ${{ env.CODE_DEPLOY_APPLICATION_NAME }} \
            --ignore-hidden-files \
            --s3-location s3://$S3_BUCKET_NAME/$GITHUB_SHA.zip \
            --source .

      # (6) S3 버킷에 있는 파일을 대상으로 CodeDeploy 실행
      - name: Deploy to AWS EC2 from S3
        run: |
          aws deploy create-deployment \
            --application-name ${{ env.CODE_DEPLOY_APPLICATION_NAME }} \
            --deployment-config-name CodeDeployDefault.AllAtOnce \
            --deployment-group-name ${{ env.CODE_DEPLOY_DEPLOYMENT_GROUP_NAME }} \
            --s3-location bucket=$S3_BUCKET_NAME,key=$GITHUB_SHA.zip,bundleType=zip
